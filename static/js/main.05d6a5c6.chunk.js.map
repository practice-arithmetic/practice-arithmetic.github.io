{"version":3,"sources":["components/NextButton.tsx","components/Equals.tsx","components/Icons.tsx","components/Mark.tsx","components/Operand.tsx","components/Operator.tsx","components/Input/InputText.tsx","components/Result.tsx","core/Sum.tsx","utils/GenerateNumber.ts","core/Sums.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NextButton","className","setRefresh","type","onClick","event","value","memo","Equals","Check","props","color","size","Mark","proposedAnswer","correctAnswer","Operand","index","operatorSymbol","Sum","Operation","InputText","Result","proposedTuple","proposed","setProposed","undefined","toString","onChange","processChange","Number","safeGetValue","target","refresh","operand1","operand2","generateInteger","max","Math","floor","random","setStateIndexed","stateTuple","state","setState","clonedState","Sums","useState","Date","startTime","setStartTime","checkpointTime","setCheckpointTime","finished","setFinished","operandList1","setOperandList1","operandList2","setOperandList2","proposedList","setProposedList","score","map","reduce","sum","actual","calculateScore","feedback","rowCount","elapsedSecs","getTime","getFeedback","useEffect","range","interval","setInterval","clearInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05d6a5c6.chunk.js","sourcesContent":["import React, { MouseEvent, memo } from 'react';\n\nexport type NextButtonPropsType = {\n    className: string,\n    setRefresh: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nconst NextButton = ({\n    className,\n    setRefresh,\n}: NextButtonPropsType) => {\n\n    const nextPage = () => {\n        setRefresh(true);\n    }\n\n    const handleClick = (event: MouseEvent<HTMLInputElement>) => {\n        nextPage();\n    }\n\n    return (\n        <input type=\"button\" className={className} onClick={handleClick} value=\"Next\" />\n    );\n}\n\nexport default memo(NextButton);\n","import React, { memo } from 'react';\n\nconst Equals = () => {\n\n    return (\n        <div className=\"equals\">=</div>\n    );\n}\n\nexport default memo(Equals);\n","import { FiCheck } from \"react-icons/fi\";\n\nexport function Check(props: any) {\n    return <FiCheck color=\"green\" size=\"40px\" {...props} />;\n}\n","import React, { memo } from 'react';\nimport { Check } from './Icons';\n\nconst Mark = ({\n    proposedAnswer,\n    correctAnswer,\n}: {\n    proposedAnswer: number | undefined,\n    correctAnswer: number,\n}) => {\n\n    return (\n        <div className=\"mark\">\n            {(proposedAnswer === correctAnswer) && <Check />}\n        </div>\n    );\n}\n\nexport default memo(Mark);\n","import React, { memo } from 'react';\n\nconst Operand = ({\n    value,\n    index,\n}: {\n    value: number,\n    index: number,\n}) => {\n\n    return (\n        <div className={`operand${index + 1}`}>{value}</div>\n    );\n}\n\nexport default memo(Operand);\n","import React, { memo } from 'react';\n\nexport type OperatorType = \"Sum\";\n\nconst operatorSymbol = {\n    Sum: '+',\n} as const;\n\nconst Operation = ({\n    type\n}: {\n    type: OperatorType\n}) => {\n\n    return (\n        <div className=\"operator\">{operatorSymbol[type]}</div>\n    );\n}\n\nexport default memo(Operation);\n","import { FunctionComponent, InputHTMLAttributes, memo } from \"react\";\nimport './InputText.css';\n\nexport interface InputTextProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'placeholder'> {}\n\nconst InputText: FunctionComponent<InputTextProps> = ({\n    ...props\n}) => {\n\n    const className = `animated-input-container${props.value == null || props.value === '' ? '' : ' has-value'} ${props.className}`\n\n    return (\n        <span className={className}>\n            <input {...props} />\n            <span />\n        </span>\n    );\n}\n\nexport default memo(InputText);\n","import React, { ChangeEvent, memo } from 'react';\nimport { ResultPropsType } from '../core/Sum';\nimport InputText from './Input/InputText';\n\nconst safeSetValue = (value: number | undefined) => {\n    return value === undefined ? '' : value.toString();\n}\n\nconst safeGetValue = (value: string | undefined) => {\n    return Number(value) ?? undefined;\n}\n\nconst Result = ({\n    proposedTuple,\n}:\n    ResultPropsType\n) => {\n\n    const [proposed, setProposed] = proposedTuple;\n\n    const processChange = (value: number | undefined) => {\n        setProposed(value);\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value !== '' ? event.target.value : undefined;\n        processChange(safeGetValue(value));\n    }\n\n    return (\n        <InputText type=\"number\" className=\"result\" value={safeSetValue(proposed)} onChange={handleChange} />\n    );\n}\n\nexport default memo(Result);\n","import React, { memo } from 'react';\nimport Equals from '../components/Equals';\nimport Mark from '../components/Mark';\nimport Operand from '../components/Operand';\nimport Operation from '../components/Operator';\nimport Result from '../components/Result';\n\nexport type ResultPropsType = {\n    proposedTuple: [number | undefined, (value: number | undefined) => void],\n};\n\nexport type SumPropsType = {\n    refresh: boolean,\n    operand1: number,\n    operand2: number,\n    proposedTuple: [number | undefined, (value: number | undefined) => void],\n}\n\nconst Sum = ({\n    refresh,\n    operand1,\n    operand2,\n    proposedTuple,\n}:\n    SumPropsType\n) => {\n\n    const [proposed,] = proposedTuple;\n\n    return (\n        <>\n            <Operand value={operand1} index={0} />\n            <Operation type={\"Sum\"} />\n            <Operand value={operand2} index={1} />\n            <Equals />\n            <Result proposedTuple={proposedTuple} />\n            <Mark proposedAnswer={proposed} correctAnswer={operand1 + operand2} />\n        </>\n    );\n}\n\nexport default memo(Sum);\n","export const generateInteger = (max: number) => {\n    return 1 + Math.floor(Math.random() * max);\n}","import React, { memo, useEffect, useState } from 'react';\nimport range from 'lodash.range';\nimport NextButton from '../components/NextButton';\nimport './Sums.css';\nimport Sum from './Sum';\nimport { generateInteger } from '../utils/GenerateNumber';\n\nexport type ProposedStateType = {\n    proposed: number | undefined,\n    setProposed: React.Dispatch<React.SetStateAction<number | undefined>>\n};\n\nexport type RefreshStateType = {\n    setRefresh: React.Dispatch<React.SetStateAction<boolean>>\n};\n\nconst setStateIndexed = <T extends unknown>(\n    index: number,\n    stateTuple: [T[], React.Dispatch<React.SetStateAction<T[]>>],\n) => {\n    const [state, setState] = stateTuple;\n    const clonedState = [...state];\n\n    return (value: T) => {\n        clonedState[index] = value;\n        setState(clonedState);\n    }\n}\n\nconst calculateScore = (\n    operandList1: number[],\n    operandList2: number[],\n    proposedList: (number | undefined)[]\n) => {\n    const actualList = operandList1.map((operand1, index) => {\n        return operand1 + operandList2[index];\n    });\n\n    return actualList.reduce((sum: number, actual: number, index: number) => {\n        return actual === proposedList[index] ? sum + 1 : sum;\n    }, 0);\n}\n\nconst getFeedback = (\n    score: number, startTime: Date,\n    checkpointTime: Date,\n    rowCount: number,\n) => {\n    const elapsedSecs = (checkpointTime.getTime() - startTime.getTime()) / 1000;\n\n    return `${score} out of ${rowCount} in ${Math.floor(elapsedSecs)} seconds`\n}\n\nconst Sums = () => {\n\n    const rowCount: number = 5;\n\n    const [startTime, setStartTime] = useState<Date>(new Date());\n    const [checkpointTime, setCheckpointTime] = useState<Date>(new Date());\n    const [refresh, setRefresh] = useState<boolean>(true);\n    const [finished, setFinished] = useState<boolean>(false);\n\n    const [operandList1, setOperandList1] = useState<number[]>([]);\n    const [operandList2, setOperandList2] = useState<number[]>([]);\n    const [proposedList, setProposedList] = useState<(number | undefined)[]>([]);\n\n    const score = calculateScore(operandList1, operandList2, proposedList);\n\n    const feedback = getFeedback(\n        score,\n        startTime,\n        checkpointTime,\n        rowCount\n    );\n\n    useEffect(() => {\n        if (score === rowCount) {\n            setFinished(true);\n        }\n    }, [refresh, score]);\n\n    useEffect(() => {\n        if (refresh) {\n            setStartTime(new Date());\n            setCheckpointTime(new Date());\n            setRefresh(false);\n            setFinished(false);\n\n            setOperandList1(range(rowCount).map(() => {\n                return generateInteger(50);\n            }));\n            setOperandList2(range(rowCount).map(() => {\n                return generateInteger(50);\n            }));\n            setProposedList(range(rowCount).map(() => {\n                return undefined;\n            }));\n        }\n    }, [refresh]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setCheckpointTime(new Date());\n        }, 1000);\n\n        if (finished) {\n            clearInterval(interval);\n        }\n\n        return () => clearInterval(interval);\n    }, [finished]);\n\n    return (\n        <div className=\"outer-container\">\n            <div className=\"sums-container\">\n                {range(rowCount).map((index: number) => {\n                    return (\n                        <Sum\n                            refresh={refresh}\n                            operand1={operandList1[index]}\n                            operand2={operandList2[index]}\n                            proposedTuple={[proposedList[index], setStateIndexed(index, [proposedList, setProposedList])]}\n                        />\n                    )\n                })}\n            </div>\n\n            <div className=\"feedback\">{feedback}</div>\n            <NextButton className=\"next-button\" setRefresh={setRefresh} />\n        </div>\n    );\n}\n\nexport default memo(Sums);\n","import React from 'react';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport './App.css';\nimport Sums from './core/Sums';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route>\n          <Sums />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}