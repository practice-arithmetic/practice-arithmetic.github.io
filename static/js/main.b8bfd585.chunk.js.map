{"version":3,"sources":["components/NextButton.tsx","components/Equals.tsx","components/Icons.tsx","components/Mark.tsx","components/Operand.tsx","components/Operator.tsx","components/Input/InputText.tsx","components/Result.tsx","core/Sum.tsx","utils/GenerateNumber.ts","components/VisualSum/images/cat-head.svg","components/VisualSum/PrintAmount.tsx","components/VisualSum/index.tsx","core/Sums.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NextButton","className","setRefresh","type","onClick","event","value","memo","Equals","Check","props","color","size","Mark","proposedAnswer","correctAnswer","Operand","index","operatorSymbol","Sum","Operation","InputText","Result","proposedTuple","setFocus","proposed","setProposed","undefined","toString","onChange","processChange","Number","safeGetValue","target","onFocus","refresh","operand1","operand2","generateInteger","max","Math","floor","random","PrintAmount","operandDigits","offset","map","digit","order","range","pow","length","unit","line","reduce","sum","style","position","top","left","width","height","src","catImage","alt","VisualSum","operand1Digits","split","operand2Digits","operand1DigitsSum","setStateIndexed","stateTuple","state","setState","clonedState","Sums","useState","Date","startTime","setStartTime","checkpointTime","setCheckpointTime","finished","setFinished","focusIndex","setFocusIndex","operandList1","setOperandList1","operandList2","setOperandList2","proposedList","setProposedList","score","actual","calculateScore","feedback","rowCount","elapsedSecs","getTime","getFeedback","useEffect","interval","setInterval","clearInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0VAOMA,EAAa,SAAC,GAGQ,IAFxBC,EAEuB,EAFvBA,UACAC,EACuB,EADvBA,WAWA,OACI,uBAAOC,KAAK,SAASF,UAAWA,EAAWG,QAL3B,SAACC,GAHjBH,GAAW,IAQsDI,MAAM,UAIhEC,iBAAKP,GCvBdQ,G,MAAS,WAEX,OACI,qBAAKP,UAAU,SAAf,iBAIOM,iBAAKC,G,gBCPb,SAASC,EAAMC,GAClB,OAAO,cAAC,IAAD,aAASC,MAAM,QAAQC,KAAK,QAAWF,ICAlD,IAAMG,EAAO,SAAC,GAMP,IALHC,EAKE,EALFA,eACAC,EAIE,EAJFA,cAMA,OACI,qBAAKd,UAAU,OAAf,SACMa,IAAmBC,GAAkB,cAACN,EAAD,OAKpCF,iBAAKM,GChBdG,EAAU,SAAC,GAMV,IALHV,EAKE,EALFA,MACAW,EAIE,EAJFA,MAMA,OACI,qBAAKhB,UAAS,iBAAYgB,EAAQ,GAAlC,SAAwCX,KAIjCC,iBAAKS,GCXdE,EAAiB,CACnBC,IAAK,KAGHC,EAAY,SAAC,GAIZ,IAHHjB,EAGE,EAHFA,KAKA,OACI,qBAAKF,UAAU,WAAf,SAA2BiB,EAAef,MAInCI,iBAAKa,GCddC,G,MAA+C,SAAC,GAE/C,IADAX,EACD,oBAEIT,EAAS,kCAA6C,MAAfS,EAAMJ,OAAiC,KAAhBI,EAAMJ,MAAe,GAAK,aAA/E,YAA+FI,EAAMT,WAEpH,OACI,uBAAMA,UAAWA,EAAjB,UACI,qCAAWS,IACX,8BAKGH,iBAAKc,GCHdC,EAAS,SAAC,GAKV,IAlBgBhB,EAclBiB,EAIC,EAJDA,cACAC,EAGC,EAHDA,SAGC,cAE+BD,EAF/B,GAEME,EAFN,KAEgBC,EAFhB,KAiBD,OACI,cAAC,EAAD,CACIvB,KAAK,SACLF,UAAU,SACVK,OAvCUA,EAuCUmB,OAtCXE,IAAVrB,EAAsB,GAAKA,EAAMsB,YAuChCC,SAda,SAACxB,IAJA,SAACC,GACnBoB,EAAYpB,GAKZwB,CAxBa,SAACxB,GAA+B,IAAD,EAChD,iBAAOyB,OAAOzB,UAAd,aAAwBqB,EAuBNK,CADuB,KAAvB3B,EAAM4B,OAAO3B,MAAeD,EAAM4B,OAAO3B,WAAQqB,KAc3DO,QAVY,SAAC7B,GACjBmB,QAcOjB,iBAAKe,GClCdH,EAAM,SAAC,GAQR,EAPDgB,QAOE,IANFC,EAMC,EANDA,SACAC,EAKC,EALDA,SACAd,EAIC,EAJDA,cACAC,EAGC,EAHDA,SAKOC,EAFN,YAEmBF,EAFnB,MAID,OACI,qCACI,cAAC,EAAD,CAASjB,MAAO8B,EAAUnB,MAAO,IACjC,cAAC,EAAD,CAAWd,KAAM,QACjB,cAAC,EAAD,CAASG,MAAO+B,EAAUpB,MAAO,IACjC,cAAC,EAAD,IACA,cAAC,EAAD,CAAQM,cAAeA,EAAeC,SAAUA,IAChD,cAAC,EAAD,CAAMV,eAAgBW,EAAUV,cAAeqB,EAAWC,QAKvD9B,iBAAKY,GCvCPmB,EAAkB,SAACC,GAC5B,OAAO,EAAIC,KAAKC,MAAMD,KAAKE,SAAWH,ICD3B,MAA0B,qCCSnCI,EAAc,SAAC,GAGM,IAFvBC,EAEsB,EAFtBA,cACAC,EACsB,EADtBA,OAGA,OACI,mCACKD,EAAcE,KAAI,SAACC,EAAeC,GAC/B,OAAOC,IAAMF,GAAOD,KAAI,SAAC7B,GACrB,OAAOgC,IAAMT,KAAKU,IAAI,GAAIN,EAAcO,OAASH,EAAQ,IAAIF,KAAI,SAACM,GAE9D,IAAMC,EAAOJ,IAAMD,GAAOM,QAAO,SAACC,EAAatC,GAC3C,OAAOsC,EAAMX,EAAc3B,KAC5B,GAIGuC,EAAuB,CACzBC,SAAU,WACVC,IAHuD,KAA7Cb,EAAUA,EAAS,EAAK,GAAKQ,EAAOpC,GAI9C0C,KALgB,GAAPP,EAMTQ,MAAO,OACPC,OAAQ,QAGZ,OAAO,qBAAKC,IAAKC,EAAUC,IAAI,IAAIR,MAAOA,gBAQnDjD,iBAAKoC,GCjCdsB,EAAY,SAAC,GAIG,IAHlBhE,EAGiB,EAHjBA,UACAmC,EAEiB,EAFjBA,SACAC,EACiB,EADjBA,SAGM6B,EAAiB9B,EAASR,WAAWuC,MAAM,IAAIrB,IAAIf,QACnDqC,EAAiB/B,EAAST,WAAWuC,MAAM,IAAIrB,IAAIf,QACnDsC,EAAoBH,EAAeZ,QAAO,SAACC,EAAaR,GAC1D,OAAOQ,EAAMR,IACd,GAEH,OACI,sBAAK9C,UAAWA,EAAhB,UACI,cAAC,EAAD,CAAa2C,cAAesB,EAAgBrB,OAAQ,IACpD,cAAC,EAAD,CAAaD,cAAewB,EAAgBvB,OAAQwB,QAKjD9D,iBAAK0D,GCZdK,EAAkB,SACpBrD,EACAsD,GACE,IAAD,cACyBA,EADzB,GACMC,EADN,KACaC,EADb,KAEKC,EAAW,YAAOF,GAExB,OAAO,SAAClE,GACJoE,EAAYzD,GAASX,EACrBmE,EAASC,KAIXlD,EAAW,SACbP,EACAwD,GAGA,OAAO,WACHA,EAASxD,KA4BX0D,EAAO,WAET,IAFe,EAImBC,mBAAe,IAAIC,MAJtC,mBAIRC,EAJQ,KAIGC,EAJH,OAK6BH,mBAAe,IAAIC,MALhD,mBAKRG,EALQ,KAKQC,EALR,OAMeL,oBAAkB,GANjC,mBAMRzC,EANQ,KAMCjC,EAND,OAOiB0E,oBAAkB,GAPnC,mBAORM,EAPQ,KAOEC,EAPF,OAQqBP,wBAA+BjD,GARpD,mBAQRyD,EARQ,KAQIC,EARJ,OAUyBT,mBAAmB,IAV5C,mBAURU,EAVQ,KAUMC,EAVN,OAWyBX,mBAAmB,IAX5C,mBAWRY,EAXQ,KAWMC,EAXN,OAYyBb,mBAAiC,IAZ1D,mBAYRc,EAZQ,KAYMC,EAZN,KAcTC,EAtCa,SACnBN,EACAE,EACAE,GAMA,OAJmBJ,EAAaxC,KAAI,SAACV,EAAUnB,GAC3C,OAAOmB,EAAWoD,EAAavE,MAGjBqC,QAAO,SAACC,EAAasC,EAAgB5E,GACnD,OAAO4E,IAAWH,EAAazE,GAASsC,EAAM,EAAIA,IACnD,GA2BWuC,CAAeR,EAAcE,EAAcE,GAEnDK,EA1BU,SAChBH,EAAed,EACfE,EACAgB,GAEA,IAAMC,GAAejB,EAAekB,UAAYpB,EAAUoB,WAAa,IAEvE,MAAM,GAAN,OAAUN,EAAV,mBAA0BI,EAA1B,eAAyCxD,KAAKC,MAAMwD,GAApD,YAmBiBE,CACbP,EACAd,EACAE,EAjBqB,GA0DzB,OArCAoB,qBAAU,WArBe,IAsBjBR,GACAT,GAAY,KAEjB,CAAChD,EAASyD,IAEbQ,qBAAU,WACFjE,IACA4C,EAAa,IAAIF,MACjBI,EAAkB,IAAIJ,MACtB3E,GAAW,GACXiF,GAAY,GAEZI,EAAgBtC,IAlCC,GAkCeH,KAAI,WAChC,OAAOR,EAAgB,QAE3BmD,EAAgBxC,IArCC,GAqCeH,KAAI,WAChC,OAAOR,EAAgB,QAE3BqD,EAAgB1C,IAxCC,GAwCeH,KAAI,mBAIzC,CAACX,IAEJiE,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACzBrB,EAAkB,IAAIJ,QACvB,KAMH,OAJIK,GACAqB,cAAcF,GAGX,kBAAME,cAAcF,MAC5B,CAACnB,IAGA,sBAAKjF,UAAU,kBAAf,UACI,qBAAKA,UAAU,iBAAf,SACKgD,IA7DY,GA6DIH,KAAI,SAAC7B,GAClB,OACI,cAAC,EAAD,CACIkB,QAASA,EACTC,SAAUkD,EAAarE,GACvBoB,SAAUmD,EAAavE,GACvBM,cAAe,CAACmE,EAAazE,GAAQqD,EAAgBrD,EAAO,CAACyE,EAAcC,KAC3EnE,SAAUA,EAASP,EAAOoE,UAM1C,qBAAKpF,UAAU,WAAf,SAA2B8F,IAC3B,cAAC,EAAD,CAAY9F,UAAU,cAAcC,WAAYA,SAEhCyB,IAAfyD,GAA4BE,EAAaF,IAAeI,EAAaJ,IAClE,cAAC,EAAD,CAAWnF,UAAU,cAAcmC,SAAUkD,EAAaF,GAAa/C,SAAUmD,EAAaJ,SAM/F7E,iBAAKoE,GCrIL6B,MAZf,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,WCIKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b8bfd585.chunk.js","sourcesContent":["import React, { MouseEvent, memo } from 'react';\n\nexport type NextButtonPropsType = {\n    className: string,\n    setRefresh: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nconst NextButton = ({\n    className,\n    setRefresh,\n}: NextButtonPropsType) => {\n\n    const nextPage = () => {\n        setRefresh(true);\n    }\n\n    const handleClick = (event: MouseEvent<HTMLInputElement>) => {\n        nextPage();\n    }\n\n    return (\n        <input type=\"button\" className={className} onClick={handleClick} value=\"Next\" />\n    );\n}\n\nexport default memo(NextButton);\n","import React, { memo } from 'react';\n\nconst Equals = () => {\n\n    return (\n        <div className=\"equals\">=</div>\n    );\n}\n\nexport default memo(Equals);\n","import { FiCheck } from \"react-icons/fi\";\n\nexport function Check(props: any) {\n    return <FiCheck color=\"green\" size=\"40px\" {...props} />;\n}\n","import React, { memo } from 'react';\nimport { Check } from './Icons';\n\nconst Mark = ({\n    proposedAnswer,\n    correctAnswer,\n}: {\n    proposedAnswer: number | undefined,\n    correctAnswer: number,\n}) => {\n\n    return (\n        <div className=\"mark\">\n            {(proposedAnswer === correctAnswer) && <Check />}\n        </div>\n    );\n}\n\nexport default memo(Mark);\n","import React, { memo } from 'react';\n\nconst Operand = ({\n    value,\n    index,\n}: {\n    value: number,\n    index: number,\n}) => {\n\n    return (\n        <div className={`operand${index + 1}`}>{value}</div>\n    );\n}\n\nexport default memo(Operand);\n","import React, { memo } from 'react';\n\nexport type OperatorType = \"Sum\";\n\nconst operatorSymbol = {\n    Sum: '+',\n} as const;\n\nconst Operation = ({\n    type\n}: {\n    type: OperatorType\n}) => {\n\n    return (\n        <div className=\"operator\">{operatorSymbol[type]}</div>\n    );\n}\n\nexport default memo(Operation);\n","import { FunctionComponent, InputHTMLAttributes, memo } from \"react\";\nimport './InputText.css';\n\nexport interface InputTextProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'placeholder'> {}\n\nconst InputText: FunctionComponent<InputTextProps> = ({\n    ...props\n}) => {\n\n    const className = `animated-input-container${props.value == null || props.value === '' ? '' : ' has-value'} ${props.className}`\n\n    return (\n        <span className={className}>\n            <input {...props} />\n            <span />\n        </span>\n    );\n}\n\nexport default memo(InputText);\n","import React, { ChangeEvent, FocusEvent, memo } from 'react';\nimport InputText from './Input/InputText';\n\nconst safeSetValue = (value: number | undefined) => {\n    return value === undefined ? '' : value.toString();\n}\n\nconst safeGetValue = (value: string | undefined) => {\n    return Number(value) ?? undefined;\n}\n\nexport type ResultPropsType = {\n    proposedTuple: [number | undefined, (value: number | undefined) => void],\n    setFocus: () => void,\n};\n\nconst Result = ({\n    proposedTuple,\n    setFocus,\n}:\n    ResultPropsType\n) => {\n\n    const [proposed, setProposed] = proposedTuple;\n\n    const processChange = (value: number | undefined) => {\n        setProposed(value);\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value !== '' ? event.target.value : undefined;\n        processChange(safeGetValue(value));\n    }\n\n    const handleFocus = (event: FocusEvent<HTMLInputElement>) => {\n        setFocus();\n    }\n\n    return (\n        <InputText\n            type=\"number\"\n            className=\"result\"\n            value={safeSetValue(proposed)}\n            onChange={handleChange}\n            onFocus={handleFocus}\n        />\n    );\n}\n\nexport default memo(Result);\n","import React, { memo } from 'react';\nimport Equals from '../components/Equals';\nimport Mark from '../components/Mark';\nimport Operand from '../components/Operand';\nimport Operation from '../components/Operator';\nimport Result from '../components/Result';\n\nexport type SumPropsType = {\n    refresh: boolean,\n    operand1: number,\n    operand2: number,\n    proposedTuple: [number | undefined, (value: number | undefined) => void],\n    setFocus: () => void,\n}\n\nconst Sum = ({\n    refresh,\n    operand1,\n    operand2,\n    proposedTuple,\n    setFocus,\n}:\n    SumPropsType\n) => {\n\n    const [proposed,] = proposedTuple;\n\n    return (\n        <>\n            <Operand value={operand1} index={0} />\n            <Operation type={\"Sum\"} />\n            <Operand value={operand2} index={1} />\n            <Equals />\n            <Result proposedTuple={proposedTuple} setFocus={setFocus} />\n            <Mark proposedAnswer={proposed} correctAnswer={operand1 + operand2} />\n        </>\n    );\n}\n\nexport default memo(Sum);\n","export const generateInteger = (max: number) => {\n    return 1 + Math.floor(Math.random() * max);\n}","export default __webpack_public_path__ + \"static/media/cat-head.fb3f0ca1.svg\";","import { CSSProperties, memo } from \"react\";\nimport range from \"lodash.range\";\nimport catImage from './images/cat-head.svg';\n\ntype PrintHintPropsType = {\n    operandDigits: number[],\n    offset: number,\n}\n\nconst PrintAmount = ({\n    operandDigits,\n    offset,\n}: PrintHintPropsType) => {\n\n    return (\n        <>\n            {operandDigits.map((digit: number, order: number) => {\n                return range(digit).map((index: number) => {\n                    return range(Math.pow(10, operandDigits.length - order - 1)).map((unit: number) => {\n\n                        const line = range(order).reduce((sum: number, index: number) => {\n                            return sum + operandDigits[index];\n                        }, 0);\n\n                        const left = unit * 18;\n                        const top = ((offset ? (offset + 2) : 0) + line + index) * 18;\n                        const style: CSSProperties = {\n                            position: \"absolute\",\n                            top: top,\n                            left: left,\n                            width: \"16px\",\n                            height: \"16px\",\n                        } as CSSProperties;\n\n                        return <img src={catImage} alt=\".\" style={style} />;\n                    })\n                })\n            })}\n        </>\n    );\n}\n\nexport default memo(PrintAmount);\n","import React, { memo } from \"react\";\nimport PrintAmount from \"./PrintAmount\";\n\ntype HintPropsType = {\n    className: string,\n    operand1: number,\n    operand2: number,\n}\n\nconst VisualSum = ({\n    className,\n    operand1,\n    operand2,\n}: HintPropsType) => {\n\n    const operand1Digits = operand1.toString().split('').map(Number);\n    const operand2Digits = operand2.toString().split('').map(Number);\n    const operand1DigitsSum = operand1Digits.reduce((sum: number, digit: number) => {\n        return sum + digit;\n    }, 0);\n\n    return (\n        <div className={className}>\n            <PrintAmount operandDigits={operand1Digits} offset={0} />\n            <PrintAmount operandDigits={operand2Digits} offset={operand1DigitsSum} />\n        </div>\n    );\n}\n\nexport default memo(VisualSum);\n","import React, { memo, useEffect, useState } from 'react';\nimport range from 'lodash.range';\nimport NextButton from '../components/NextButton';\nimport './Sums.css';\nimport Sum from './Sum';\nimport { generateInteger } from '../utils/GenerateNumber';\nimport VisualSum from '../components/VisualSum';\n\nexport type ProposedStateType = {\n    proposed: number | undefined,\n    setProposed: React.Dispatch<React.SetStateAction<number | undefined>>\n};\n\nexport type RefreshStateType = {\n    setRefresh: React.Dispatch<React.SetStateAction<boolean>>\n};\n\nconst setStateIndexed = <T extends unknown>(\n    index: number,\n    stateTuple: [T[], React.Dispatch<React.SetStateAction<T[]>>],\n) => {\n    const [state, setState] = stateTuple;\n    const clonedState = [...state];\n\n    return (value: T) => {\n        clonedState[index] = value;\n        setState(clonedState);\n    }\n}\n\nconst setFocus = (\n    index: number,\n    setState: React.Dispatch<React.SetStateAction<number | undefined>>,\n) => {\n\n    return () => {\n        setState(index);\n    }\n}\n\nconst calculateScore = (\n    operandList1: number[],\n    operandList2: number[],\n    proposedList: (number | undefined)[]\n) => {\n    const actualList = operandList1.map((operand1, index) => {\n        return operand1 + operandList2[index];\n    });\n\n    return actualList.reduce((sum: number, actual: number, index: number) => {\n        return actual === proposedList[index] ? sum + 1 : sum;\n    }, 0);\n}\n\nconst getFeedback = (\n    score: number, startTime: Date,\n    checkpointTime: Date,\n    rowCount: number,\n) => {\n    const elapsedSecs = (checkpointTime.getTime() - startTime.getTime()) / 1000;\n\n    return `${score} out of ${rowCount} in ${Math.floor(elapsedSecs)} seconds`\n}\n\nconst Sums = () => {\n\n    const rowCount: number = 5;\n\n    const [startTime, setStartTime] = useState<Date>(new Date());\n    const [checkpointTime, setCheckpointTime] = useState<Date>(new Date());\n    const [refresh, setRefresh] = useState<boolean>(true);\n    const [finished, setFinished] = useState<boolean>(false);\n    const [focusIndex, setFocusIndex] = useState<(number | undefined)>(undefined);\n\n    const [operandList1, setOperandList1] = useState<number[]>([]);\n    const [operandList2, setOperandList2] = useState<number[]>([]);\n    const [proposedList, setProposedList] = useState<(number | undefined)[]>([]);\n\n    const score = calculateScore(operandList1, operandList2, proposedList);\n\n    const feedback = getFeedback(\n        score,\n        startTime,\n        checkpointTime,\n        rowCount\n    );\n\n    useEffect(() => {\n        if (score === rowCount) {\n            setFinished(true);\n        }\n    }, [refresh, score]);\n\n    useEffect(() => {\n        if (refresh) {\n            setStartTime(new Date());\n            setCheckpointTime(new Date());\n            setRefresh(false);\n            setFinished(false);\n\n            setOperandList1(range(rowCount).map(() => {\n                return generateInteger(50);\n            }));\n            setOperandList2(range(rowCount).map(() => {\n                return generateInteger(50);\n            }));\n            setProposedList(range(rowCount).map(() => {\n                return undefined;\n            }));\n        }\n    }, [refresh]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setCheckpointTime(new Date());\n        }, 1000);\n\n        if (finished) {\n            clearInterval(interval);\n        }\n\n        return () => clearInterval(interval);\n    }, [finished]);\n\n    return (\n        <div className=\"outer-container\">\n            <div className=\"sums-container\">\n                {range(rowCount).map((index: number) => {\n                    return (\n                        <Sum\n                            refresh={refresh}\n                            operand1={operandList1[index]}\n                            operand2={operandList2[index]}\n                            proposedTuple={[proposedList[index], setStateIndexed(index, [proposedList, setProposedList])]}\n                            setFocus={setFocus(index, setFocusIndex)}\n                        />\n                    )\n                })}\n            </div>\n\n            <div className=\"feedback\">{feedback}</div>\n            <NextButton className=\"next-button\" setRefresh={setRefresh} />\n\n            {focusIndex !== undefined && operandList1[focusIndex] && operandList2[focusIndex] && \n                <VisualSum className=\"visual-hint\" operand1={operandList1[focusIndex]} operand2={operandList2[focusIndex]} />\n            }\n        </div>\n    );\n}\n\nexport default memo(Sums);\n","import React from 'react';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport './App.css';\nimport Sums from './core/Sums';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route>\n          <Sums />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}