{"version":3,"sources":["components/Equals.tsx","components/Icons.tsx","components/Mark.tsx","components/NextButton.tsx","components/Operand.tsx","components/Operator.tsx","components/Input/InputText.tsx","components/Result.tsx","utils/GenerateNumber.ts","core/Sum.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Equals","className","memo","Check","props","color","size","Mark","proposedAnswer","correctAnswer","NextButton","setRefresh","type","onClick","event","value","Operand","index","operatorSymbol","Sum","Operation","InputText","Result","proposed","setProposed","undefined","toString","onChange","processChange","Number","safeGetValue","target","generateInteger","max","Math","floor","random","useState","operand1","setOperand1","operand2","setOperand2","refresh","useEffect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04e1fa3d.chunk.js","sourcesContent":["import React, { memo } from 'react';\n\nconst Equals = () => {\n\n    return (\n        <div className=\"equals\">=</div>\n    );\n}\n\nexport default memo(Equals);\n","import { FiCheck } from \"react-icons/fi\";\n\nexport function Check(props: any) {\n    return <FiCheck color=\"green\" size=\"40px\" {...props} />;\n}\n","import React, { memo } from 'react';\nimport { Check } from './Icons';\n\nconst Mark = ({\n    proposedAnswer,\n    correctAnswer,\n}: {\n    proposedAnswer: number | undefined,\n    correctAnswer: number,\n}) => {\n\n    return (\n        <div className=\"mark\">\n            {(proposedAnswer === correctAnswer) && <Check />}\n        </div>\n    );\n}\n\nexport default memo(Mark);\n","import React, { MouseEvent, memo } from 'react';\nimport { RefreshStateType } from '../core/Sum';\n\nconst NextButton = ({\n    setRefresh,\n}: RefreshStateType) => {\n\n    const nextPage = () => {\n        setRefresh(true);\n    }\n\n    const handleClick = (event: MouseEvent<HTMLInputElement>) => {\n        nextPage();\n    }\n\n    return (\n        <input type=\"button\" onClick={handleClick} value=\"Next\" />\n    );\n}\n\nexport default memo(NextButton);\n","import React, { memo } from 'react';\n\nconst Operand = ({\n    value,\n    index,\n}: {\n    value: number,\n    index: number,\n}) => {\n\n    return (\n        <div className={`operand${index + 1}`}>{value}</div>\n    );\n}\n\nexport default memo(Operand);\n","import React, { memo } from 'react';\n\nexport type OperatorType = \"Sum\";\n\nconst operatorSymbol = {\n    Sum: '+',\n} as const;\n\nconst Operation = ({\n    type\n}: {\n    type: OperatorType\n}) => {\n\n    return (\n        <div className=\"operator\">{operatorSymbol[type]}</div>\n    );\n}\n\nexport default memo(Operation);\n","import { FunctionComponent, InputHTMLAttributes, memo } from \"react\";\nimport './InputText.css';\n\nexport interface InputTextProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'placeholder'> {}\n\nconst InputText: FunctionComponent<InputTextProps> = ({\n    ...props\n}) => {\n\n    const className = `animated-input-container${props.value == null || props.value === '' ? '' : ' has-value'} ${props.className}`\n\n    return (\n        <span className={className}>\n            <input {...props} />\n            <span />\n        </span>\n    );\n}\n\nexport default memo(InputText);\n","import React, { ChangeEvent, memo } from 'react';\nimport { ProposedStateType } from '../core/Sum';\nimport InputText from './Input/InputText';\n\nconst safeSetValue = (value: number | undefined) => {\n    return value === undefined? '': value.toString();\n}\n\nconst safeGetValue = (value: string | undefined) => {\n    return Number(value) ?? undefined;\n}\n\nconst Result = ({\n    proposed,\n    setProposed,\n}:\n    ProposedStateType,\n) => {\n\n\n    const processChange = (value: number | undefined) => {\n        setProposed(value);\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value !== '' ? event.target.value : undefined;\n        processChange(safeGetValue(value));\n    }\n\n    return (\n        <InputText type=\"number\" className=\"result\" value={safeSetValue(proposed)} onChange={handleChange} />\n    );\n}\n\nexport default memo(Result);\n","export const generateInteger = (max: number) => {\n    return 1 + Math.floor(Math.random() * max);\n}","import React, { memo, useEffect, useState } from 'react';\nimport Equals from '../components/Equals';\nimport Mark from '../components/Mark';\nimport NextButton from '../components/NextButton';\nimport Operand from '../components/Operand';\nimport Operation from '../components/Operator';\nimport Result from '../components/Result';\nimport { generateInteger } from '../utils/GenerateNumber';\nimport './Sum.css';\n\nexport type ProposedStateType = {\n    proposed: number | undefined,\n    setProposed: React.Dispatch<React.SetStateAction<number | undefined>>\n};\n\nexport type RefreshStateType = {\n    setRefresh: React.Dispatch<React.SetStateAction<boolean>>\n};\n\nconst Sum = () => {\n\n    const [operand1, setOperand1] = useState<number>(generateInteger(50));\n    const [operand2, setOperand2] = useState<number>(generateInteger(50));\n    const [proposed, setProposed] = useState<number | undefined>(undefined);\n    const [refresh, setRefresh] = useState<boolean>(false);\n\n    useEffect(() => {\n        if(refresh) {\n            setOperand1(generateInteger(50));\n            setOperand2(generateInteger(50));\n            setProposed(undefined);\n            setRefresh(false);\n        }\n    }, [refresh]);\n\n    return (\n        <>\n            <div className=\"sum-container\">\n                <Operand value={operand1} index={0} />\n                <Operation type={\"Sum\"} />\n                <Operand value={operand2} index={1} />\n                <Equals />\n                <Result proposed={proposed} setProposed={setProposed} />\n                <Mark proposedAnswer={proposed} correctAnswer={operand1 + operand2} />\n            </div>\n\n            <NextButton setRefresh={setRefresh} />\n        </>\n    );\n}\n\nexport default memo(Sum);\n","import React from 'react';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport './App.css';\nimport Sum from './core/Sum';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route>\n          <Sum />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}